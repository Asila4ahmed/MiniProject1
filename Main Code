// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

 
import "./MiniProject.sol";
 
contract ERC20 is IFACEERC20{
 
uint public override totalSupply; //this is the state variable
mapping(address => uint) public override balanceOf; 
mapping(address => mapping(address => uint)) public override allowance;
//this is the nested mapping (mappimg inside mapping), it takes the address of sender and receipient
string public name ="Tech4Dev Token"; //name of token
string public symbol ="TDT"; //token symbol
uint public decimals = 18; //token decimal
 
 //to make transfer from sender to receipient
function transfer(address recipient, uint amount) external override returns(bool){
balanceOf[msg.sender] -= amount; //method 1 is deducting the amount from sender's balance
balanceOf[recipient] += amount; //method 2 is adding amount to recipient's balance
 
emit Transfer(msg.sender, recipient, amount); //emit broadcast the event in the code
return true;
}

 //to give approval to the spender and restric the amount the spender can take from the my account
function approve(address spender, uint amount) external override returns(bool){
allowance[msg.sender][spender] = amount;
emit Approval(msg.sender, spender, amount);
return true;
}
 
 //this function will only be called by the spender
function transferFrom(address sender, address recipient, uint amount) external override returns(bool){
allowance[sender][msg.sender] -= amount; 
balanceOf[sender] -= amount;
balanceOf[recipient] += amount;
emit Transfer(sender, recipient, amount);
return true;
}

//create more amount to the owner's balance
function mint(uint amount) external {
balanceOf[msg.sender] += amount;
totalSupply += amount;//this increase the total supply//
emit Transfer(address(0), msg.sender, amount);
}

// this burn function is the opposite of the mint function. 
//In other words, reduce the amount in owner balance//
function burn(uint amount) external {
balanceOf[msg.sender] -= amount; //decreases the total supply//
totalSupply -= amount;
emit Transfer(msg.sender, address(0), amount);
 
}
}
